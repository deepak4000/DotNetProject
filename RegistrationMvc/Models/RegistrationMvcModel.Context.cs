//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistrationMvc.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UserLoginEntities : DbContext
    {
        public UserLoginEntities()
            : base("name=UserLoginEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_Project> tbl_Project { get; set; }
        public virtual DbSet<tbl_task> tbl_task { get; set; }
        public virtual DbSet<tbl_TimeEntry> tbl_TimeEntry { get; set; }
        public virtual DbSet<tbl_User> tbl_User { get; set; }
    
        public virtual int ProjectDeleteData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectDeleteData", idParameter);
        }
    
        public virtual ObjectResult<ProjectGetData_Result> ProjectGetData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectGetData_Result>("ProjectGetData");
        }
    
        public virtual int ProjectInsertData(string projectName, Nullable<bool> isActive, Nullable<System.DateTime> dateCreated, Nullable<System.DateTime> dateModified, Nullable<System.DateTime> dateDeleted)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            var dateDeletedParameter = dateDeleted.HasValue ?
                new ObjectParameter("DateDeleted", dateDeleted) :
                new ObjectParameter("DateDeleted", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectInsertData", projectNameParameter, isActiveParameter, dateCreatedParameter, dateModifiedParameter, dateDeletedParameter);
        }
    
        public virtual int ProjectUpdateData(Nullable<int> id, string projectName, Nullable<bool> isActive, Nullable<System.DateTime> dateCreated, Nullable<System.DateTime> dateModified, Nullable<System.DateTime> dateDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            var dateDeletedParameter = dateDeleted.HasValue ?
                new ObjectParameter("DateDeleted", dateDeleted) :
                new ObjectParameter("DateDeleted", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProjectUpdateData", idParameter, projectNameParameter, isActiveParameter, dateCreatedParameter, dateModifiedParameter, dateDeletedParameter);
        }
    
        public virtual int TaskDeleteData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaskDeleteData", idParameter);
        }
    
        public virtual ObjectResult<TaskGetData_Result> TaskGetData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskGetData_Result>("TaskGetData");
        }
    
        public virtual int TaskInsertData(string taskName, Nullable<bool> isActive, Nullable<System.DateTime> dateCreated, Nullable<System.DateTime> dateModified, Nullable<System.DateTime> dateDeleted)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            var dateDeletedParameter = dateDeleted.HasValue ?
                new ObjectParameter("DateDeleted", dateDeleted) :
                new ObjectParameter("DateDeleted", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaskInsertData", taskNameParameter, isActiveParameter, dateCreatedParameter, dateModifiedParameter, dateDeletedParameter);
        }
    
        public virtual int TaskUpdateData(Nullable<int> id, string taskName, Nullable<bool> isActive, Nullable<System.DateTime> dateCreated, Nullable<System.DateTime> dateModified, Nullable<System.DateTime> dateDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            var dateDeletedParameter = dateDeleted.HasValue ?
                new ObjectParameter("DateDeleted", dateDeleted) :
                new ObjectParameter("DateDeleted", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TaskUpdateData", idParameter, taskNameParameter, isActiveParameter, dateCreatedParameter, dateModifiedParameter, dateDeletedParameter);
        }
    }
}
